input AbtmeQueryInput {
  name_ne: String
  _id_exists: Boolean
  sname_nin: [String]
  sname_lte: String
  _id_gt: ObjectId
  name_gt: String
  sname_gt: String
  _id_lt: ObjectId
  _id: ObjectId
  name_in: [String]
  AND: [AbtmeQueryInput!]
  sname_in: [String]
  OR: [AbtmeQueryInput!]
  name_lte: String
  name: String
  sname_exists: Boolean
  _id_lte: ObjectId
  sname_ne: String
  name_nin: [String]
  sname_gte: String
  name_exists: Boolean
  _id_gte: ObjectId
  _id_in: [ObjectId]
  name_lt: String
  _id_ne: ObjectId
  name_gte: String
  _id_nin: [ObjectId]
  sname: String
  sname_lt: String
}
type Abtme {
  _id: ObjectId
  name: String
  sname: String
}
input AbtmeInsertInput {
  sname: String
  _id: ObjectId
  name: String
}
scalar ObjectId
enum AbtmeSortByInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  SNAME_ASC
  SNAME_DESC
}
type InsertManyPayload {
  insertedIds: [ObjectId]!
}
input AbtmeUpdateInput {
  _id_unset: Boolean
  name: String
  name_unset: Boolean
  sname: String
  sname_unset: Boolean
  _id: ObjectId
}
type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}
type DeleteManyPayload {
  deletedCount: Int!
}
type Query {
  abtme(query: AbtmeQueryInput): Abtme
  abtmes(sortBy: AbtmeSortByInput, query: AbtmeQueryInput, limit: Int = 100): [Abtme]!
}
type Mutation {
  deleteManyAbtmes(query: AbtmeQueryInput): DeleteManyPayload
  deleteOneAbtme(query: AbtmeQueryInput!): Abtme
  insertManyAbtmes(data: [AbtmeInsertInput!]!): InsertManyPayload
  insertOneAbtme(data: AbtmeInsertInput!): Abtme
  replaceOneAbtme(query: AbtmeQueryInput, data: AbtmeInsertInput!): Abtme
  updateManyAbtmes(query: AbtmeQueryInput, set: AbtmeUpdateInput!): UpdateManyPayload
  updateOneAbtme(query: AbtmeQueryInput, set: AbtmeUpdateInput!): Abtme
  upsertOneAbtme(query: AbtmeQueryInput, data: AbtmeInsertInput!): Abtme
}input AbtmeQueryInput {
  name_ne: String
  _id_exists: Boolean
  sname_nin: [String]
  sname_lte: String
  _id_gt: ObjectId
  name_gt: String
  sname_gt: String
  _id_lt: ObjectId
  _id: ObjectId
  name_in: [String]
  AND: [AbtmeQueryInput!]
  sname_in: [String]
  OR: [AbtmeQueryInput!]
  name_lte: String
  name: String
  sname_exists: Boolean
  _id_lte: ObjectId
  sname_ne: String
  name_nin: [String]
  sname_gte: String
  name_exists: Boolean
  _id_gte: ObjectId
  _id_in: [ObjectId]
  name_lt: String
  _id_ne: ObjectId
  name_gte: String
  _id_nin: [ObjectId]
  sname: String
  sname_lt: String
}

input AbtmeSortInput {
  _id: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type Abtme {
  _id: ID!
  name: String!
  sname: String!
}

input AbtmeInsertInput {
  name: String!
  sname: String!
}

type Query {
  abtme(query: AbtmeQueryInput, sort: AbtmeSortInput, limit: Int): [Abtme!]!
}

type Mutation {
  insertOneAbtme(data: AbtmeInsertInput!): Abtme!
}

scalar ObjectId

enum AbtmeSortByInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  SNAME_ASC
  SNAME_DESC
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

input AbtmeUpdateInput {
  _id_unset: Boolean
  name: String
  name_unset: Boolean
  sname: String
  sname_unset: Boolean
  _id: ObjectId
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type DeleteManyPayload {
  deletedCount: Int!
}

type Query {
  abtme(query: AbtmeQueryInput): Abtme
  abtmes(sortBy: AbtmeSortByInput, query: AbtmeQueryInput, limit: Int = 100): [Abtme]!
}

type Mutation {
  deleteManyAbtmes(query: AbtmeQueryInput): DeleteManyPayload
  deleteOneAbtme(query: AbtmeQueryInput!): Abtme
  insertManyAbtmes(data: [AbtmeInsertInput!]!): InsertManyPayload
  insertOneAbtme(data: AbtmeInsertInput!): Abtme
  replaceOneAbtme(query: AbtmeQueryInput, data: AbtmeInsertInput!): Abtme
  updateManyAbtmes(query: AbtmeQueryInput, set: AbtmeUpdateInput!): UpdateManyPayload
  updateOneAbtme(query: AbtmeQueryInput, set: AbtmeUpdateInput!): Abtme
  upsertOneAbtme(query: AbtmeQueryInput, data: AbtmeInsertInput!): Abtme
}